---
description: 
globs: transform/extract_svgs.py
alwaysApply: false
---

It's important to understand how the SVG content extracted from a PDF by `pymupdf` is structured.

## Structure of raw extracted SVG content

There's a `defs` section with a combination of standalone `path`s and `path`s wrapped in `clipPath`s. Then, outside of `defs`, there's a combination of `use` elements (for text) and `g` elements with clip-path identifiers (e.g., `clip-path="url(#clip_49)"`) wrapping one or more paths. It's important that we: 1. treat each group as a single unit, and 2. always keep each group linked to its corresponding `clipPath` element (for purposes of both preserving and deleting).

## SVG Extraction Pipeline: Order of Operations

### 1. **Extract Raw SVG from PDF Page**
```python
svg_content = page.get_svg_image()
```
**Reason**: Get the complete SVG representation as generated by PyMuPDF, which includes all elements (text, images, graphics, structural elements).

### 2. **Filter Text Elements (Early Filtering)**
```python
text_filtered_svg = filter_svg_content(svg_content, filter_text=True, filter_images=False)
```
**Reason**: Remove text-related elements early while preserving images for visibility testing:
- Removes text elements (font paths, text tags)
- Keeps image elements temporarily (for exclusion from testing)
- Removes empty groups
- Removes unused clipPath definitions

**Why filter text early**: Text elements can interfere with visual contribution testing and are not needed for graphics extraction.

### 3. **Apply Visual Contribution Filtering** 
```python
visually_filtered_svg = filter_svg_elements_by_visual_contribution(
    text_filtered_svg, 
    page_width=page_width, 
    page_height=page_height
)
```
**Reason**: Test each drawing group (`<g>` element) by removing it and comparing rendered pixels to determine if it actually contributes to the visual output.

**Key design decisions**:
- Only tests `<g>` elements outside `<defs>` (actual drawing units)
- Automatically excludes groups containing image elements from testing
- Uses proper page dimensions for accurate rendering (max 800px, maintaining aspect ratio)
- Uses pixel-level comparison to detect true visual impact
- Removes elements that cause fewer than 5 pixel changes when removed
- Handles temporary ID assignment for groups without IDs using pure regex (no XML parsing, because that changes the SVG structure in unexpected ways)
- Preserves original SVG structure exactly as PyMuPDF generates it
- Uses regex to detect groups inside `<defs>` by counting unclosed tags

### 4. **Filter Image Elements (Final Filtering)**
```python
final_filtered_svg = filter_svg_content(visually_filtered_svg, filter_text=False, filter_images=True)
```
**Reason**: Remove image elements after visibility testing but before segmentation, since we don't want to extract images as vector graphics.

### 5. **Segment into Individual SVGs**
```python
svg_segments = segment_svg_groups(final_filtered_svg)
```
**Reason**: Split remaining groups into separate SVG files, each representing a distinct drawing unit.

**Why last**: Segmentation creates multiple files, so we want to ensure we're only segmenting content that has already been determined to be visually meaningful.